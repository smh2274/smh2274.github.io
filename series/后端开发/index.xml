<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>后端开发 on SMH BLOG</title>
    <link>https://smh2274.github.io/series/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 后端开发 on SMH BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 12 Jun 2019 21:52:22 +0800</lastBuildDate>
    
	<atom:link href="https://smh2274.github.io/series/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微信开发</title>
      <link>https://smh2274.github.io/blog/2019-06/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 12 Jun 2019 21:52:22 +0800</pubDate>
      
      <guid>https://smh2274.github.io/blog/2019-06/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</guid>
      <description>大纲如下 微信公众号开发 服务器验证 处理消息 推送消息 生成菜单 小程序开发 获取个人信息 微信支付 总结 微信公众号开发 1.服务器校验 timestamp(时间戳), nonce(随机字符串), signature(签名), token(令牌) func AccessVerify(timestamp, nonce, signature, token string) (bool, error) { info := []string{timestamp, nonce, token} sort.Strings(info) s := sha1.New() if _, err := io.WriteString(s, strings.Join(info, &amp;quot;&amp;quot;)); err != nil { return false, errors.New(&amp;quot;Sha1 Code Fail &amp;quot; + err.Error()) } newSignature := fmt.Sprintf(&amp;quot;%x&amp;quot;, s.Sum(nil)) return newSignature == signature, nil } 接收的URL必须是80端口或者443端口 2.处理消息 消息类型 text （文本） image （图片） voice （</description>
    </item>
    
    <item>
      <title>深度密解Go之interface</title>
      <link>https://smh2274.github.io/blog/2019-06/%E6%B7%B1%E5%BA%A6%E5%AF%86%E8%A7%A3go%E4%B9%8Binterface/</link>
      <pubDate>Sun, 02 Jun 2019 21:52:22 +0800</pubDate>
      
      <guid>https://smh2274.github.io/blog/2019-06/%E6%B7%B1%E5%BA%A6%E5%AF%86%E8%A7%A3go%E4%B9%8Binterface/</guid>
      <description>1. Go 语言与鸭子类型的关系 先直接来看维基百科里的定义： If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck. Duck Typing，鸭子类型，是动态编程语言的一种对象推断策略，它更关注对象能如何被使用，而不是对象的类型本身。Go 语言作为一门静态语言，它通过通过接口的方式完美支持鸭子类型。 例如，在动态语言 python 中，定义一个这样的函数： def hello_world(coder): coder.say_hello() 当调用此函数的时候，可以传入任意类型，只要它实现了 say_hello() 函数就可以。如果没有实现，运行过程</description>
    </item>
    
    <item>
      <title>GoLang之xml</title>
      <link>https://smh2274.github.io/blog/2019-03/golang%E4%B9%8Bxml/</link>
      <pubDate>Mon, 25 Mar 2019 23:11:22 +0800</pubDate>
      
      <guid>https://smh2274.github.io/blog/2019-03/golang%E4%B9%8Bxml/</guid>
      <description>go xml struct type WXMessage struct { ToUserName string `xml:&amp;quot;ToUserName&amp;quot;` FromUserName string `xml:&amp;quot;FromUserName&amp;quot;` CreateTime int `xml:&amp;quot;CreateTime&amp;quot;` MsgType string `xml:&amp;quot;MsgType&amp;quot;` Content string `xml:&amp;quot;Content&amp;quot;` } 这么使用会有一点问题，当 res, _ := xml.Marshal(WXMessage) res的结构将变成 &amp;lt;WXMessage&amp;gt; &amp;lt;ToUserName&amp;gt;...&amp;lt;/ToUserName&amp;gt; ... &amp;lt;/WXMessage&amp;gt; 不是真正意义上的xml结构 解决方案 在struct头一行定义xml的名称，如下： type WXMessage struct { XMLName xml.Name `xml:&amp;quot;xml&amp;quot;` ToUserName string `xml:&amp;quot;ToUserName&amp;quot;` FromUserName string `xml:&amp;quot;FromUserName&amp;quot;` CreateTime int `xml:&amp;quot;CreateTime&amp;quot;` MsgType string `xml:&amp;quot;MsgType&amp;quot;` Content string `xml:&amp;quot;Content&amp;quot;` } 这样解析出来的xml将正确地显示 &amp;lt;xml&amp;gt; &amp;lt;ToUserName&amp;gt;...&amp;lt;/ToUserName&amp;gt; ... &amp;lt;/xml&amp;gt; 微信开发中的xml 微信开发中经常有如下结构： &amp;lt;xml&amp;gt; &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[toUser]]&amp;gt;&amp;lt;/ToUserName&amp;gt; &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[fromUser]]&amp;gt;&amp;lt;/FromUserName&amp;gt; &amp;lt;CreateTime&amp;gt;12345678&amp;lt;/CreateTime&amp;gt; &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[image]]&amp;gt;&amp;lt;/MsgType&amp;gt; &amp;lt;/xml&amp;gt; 需要对xml里的&amp;lt;、&amp;gt;等进行转义，如何转义呢？ 只要在struct</description>
    </item>
    
  </channel>
</rss>